  ' Battery: All the elevator sections operating for a given Building

'  Column: All the elevators operating a specific number of landings servicing a section of the Building

'  Floor: One of the destinations serviced by a given elevator

'  Elevator: One route going up and down

'  CallButton: Buttons located on each floors designed to call for an elevator to go up or down

'  FloorRequestButton: Buttons located inside an elevator to request a destination floor that the elevator will take the passenger to

'  Doors: The Doorss open and close to let passengers in or out of the elevator

'  OpenDoorButton: Button located inside an elevator to force the Doors to remain open

'  CloseDoorButton: Button located inside an elevator to request the closing of the Doors whenever possible


' NearestElevator: send the nearest Elevator

' CloseDoors: closing Doors

' MoveUpElevator: Elevator  move up

' CallButtonLightOff: outside button off

' CallButtonLightOn: outside light on

' FindLeastBusyElevator:

' RefGap: stages where you have to call the button and stages or is the user

' every timer you have your Gap you compare it to RefCap

' FindFloorRequestButton:  inside elevator button

'  idle =  stand by

------------------------------------------------------------------------------------------------------------------------------


' when the initial sequence is in operating mode all the columns to control by the baterry and all the elevator column to control by the elevators
' you close the 2 sequences then you set up an elevator in standby mode, set the initial status elevator to the RC, set the Doorss which it closes thereafter and you
'close the sequence!

Sequence init_System
  SET battery STATUS = OPERATIONAL   
  SET elevator Status  = IDLE
  SET init_elevators = 1 
  SET Elevator Doors = Close
  CALL OperateBattery
END SEQUENCE
--------------------------------------------------------------------------------------------------------------------------------

' it finds levator using the floor and the direction then it turns on the light which indicates the direction and the placher
' then it calls the best elevator with the direction and the placher and it returns it
'ca send the request with levator and the floor


' when elevator is called the light open with direction and floor after they find the closier elevator and return this one
SEQUENCE CallElevator USING direction AND Floor
  CALL FloorButtonLightOn WITH direction AND Floor
  CALL CallButtonLightOn WITH RequestFloor RETURNING RequestedFloor
  CALL FindBestElevator WITH drection AND Floor RETURNING Elevator
  CALL SendRequestElevator WITH Floor AND Elevator
  CALL SendRequestElevator WITH floor AND RequestedFloor

END SEQUENCE
------------------------------------------------------------------------------------------------------------------------------
'//SEQUENCE IN WHICH THE USER WILL REQUEST A FLOOR IN THE ELEVATOR PANEL
SEQUENCE RequestFloor USING RequestedFloor
   CALL FloorRequestButton WITH RequestedFloor
   CALL SendRequestElevator WITH RequestedFloor
END SEQUENCE
--------------------------------------------------------------------------------------------------------------------------------
' Elevator Inside Request Button
SEQUENCE FindFloorRequestButton USING FloorRequestedButton
  FOR EACH FloorRequestButton in FloorRequestButtons
    IF Floor = FloorRequestButton THEN
      RETURN FloorRequestButton   
    END If
  END FOR   
END SEQUENCE
------------------------------------------------------------------------------------------------------------------------------
'// Inside button Light ON ////
SEQUENCE FloorButtonLightOn USING RequestedFloor
   CALL FindFloorRequestButton WITH RequestedFloor RETURNING FloorRequestButton
   SET FloorButtonLight to ON 
END SEQUENCE
------------------------------------------------------------------------------------------------------------------------------
'// Inside button Light OFF ////
SEQUENCE FloorButtonLightOff USING RequestedFloor
   CALL FindFloorRequestButton WITH RequestedFloor RETURNING FloorRequestButton
   SET FloorButtonLight to OFF
END SEQUENCE
----------------------------------------------------------------------------------------------------------------------------------

' when you push the button ouside elevator the light turn ON and show you the direction and Floor level
SENQUENCE CallButtonLightOn  USING RequestedFloor
  CALL FindCallButton WITH direction AND Floor RETURNING CallButton
  SET CallButton Light On
END SEQUENCE

----------------------------------------------------------------------------------------------------------------------------

' when you push the button ouside elevator after showing direction and floor the light turn OFF 
SEQUENCE CallButtonLightOff  USING RequestedFloor
  CALL FindCallButton WITH direction AND Floor RETURNING CallButton
  SET CallButtonLightOff
END SEQUENCE
-------------------------------------------------------------------------------------------------------------------------------
' create a sequence when the Doors opens it remains open 10 seconds and it calls the function that closes the Doors'
'  otherwise it stays open

' SEQUENCE FOR ELEVATOR DOORS
SEQUENCE OpenDoors
   SET Doors = open
   IF Doors = open THEN
   init timer to 5 sec THEN
        CALL CloseDoors
   END IF
END SEQUENCE
--------------------------------------------------------------------------------------------------------------------------------
'
' ELEVATOR DOOR CLOSING
SEQUENCE CloseDoors
   IF Doors is not obstruct
    SET Doors TO close
   ELSE IF Doors is obstruct
       CALL OpenDoors
   END IF
END SEQUENCE

----------------------------------------------------------------------------------------------------------------------------------
' 
' create a sequence that moves levator up with the levator and levator position,
' then it categorizes all the elevator and if the letters are smaller and it increases by 1 each timer
' it repeats until it finds the good stages

'Moving Up Elevator
SEQUENCE MoveUpElevator USING Elevator Floor AND Floor
   FOR EACH Elevator in Elevators
       IF Floor < Elevator Floor
          INCREMENT Elevator Floor BY 1
          REPEAT-UNTIL Floor = Elevator Floor 
       END IF
   END FOR
END SEQUENCE
------------------------------------------------------------------------------------------------------------------------------------

' create a sequence that moves the levator down with the position of the letters and which floor is levator
' Then you put each lift and if you are bigger than or is levator it decrement of 1 floors
' and this repeats juquatemps tens that it finds the good floor

' Moving Down Elevator
SEQUENCE MoveDownElevator USING ElevatorFloor AND Floor
   FOR EACH Elevator in Elevators
       IF Floor > Elevator Floor
          DECREMENT Elevator Floor BY 1
          REPEAT-UNTIL Floor = Elevator Floor 
       END IF
   END FOR
END SEQUENCE
---------------------------------------------------------------------------------------------------------------------------

' add buttons that go in the same direction of the list of Elevator

SEQUENCE SendRequestElevator USING Floor AND Elevator 
  ADD CallButtonFloor OR RequestedFloor to FloorList THEN
  CALL SortList WITH Elevator direction AND Elevator FloorList RETURNING SortedFloorList
  SET Elevator FloorList To SortedFloorList
END SEQUENCE
--------------------------------------------------------------------------------------------------------------------------

' Elevator Inside Request Button
SEQUENCE FindFloorRequestButton USING FloorRequestedButton
  FOR EACH FloorRequestButton in FloorRequestButtons
    IF Floor = FloorRequestButton THEN
      RETURN FloorRequestButton   
    END If
  END FOR   
END SEQUENCE
-------------------------------------------------------------------------------------------------------------------------


' for each buttons called with direction and Floor return outside  button "CallButton"
SEQUENCE FindCallButton USING direction AND Floor
  FOR EACH  CallButton in CallButtons
    IF direction = CallButton Direction AND Floor = CallButtonFloor THEN
      RETURN CallButton
    END IF
  END FOR
END SEQUENCE
----------------------------------------------------------------------------------------------------------------------------
' create a function that finds the best elevator position for use using direction and heading
' it gives information to all elevators,
' 'the best option is if elevator is at the same floor and stop and the Doors is open
' '2nd best option if levator is on your floors and its status is pending (stand by)
' '3rd best option if he is moving up or stop and you call up he sends it to you
' '3.1 a best option if he is moving down or stopping and you are calling down he sends it to you
' 4th best option if the Elevator is waiting without any direction
' you close all if and for and sequence if no adds
' it's called the sequence that finds the least elevator occuped and sends it to you


'  find the best elevator for people with 2 objects (direction and Floor)
SEQUENCE FindBestElevator WITH direction AND Floor


  FOR EACH Elevator in Elevators 
' best option the Elevator is the same Floor and Doors is open
   If Floor  = Elevator Floor AND direction = Elevator direction AND  Elevator status = STOPPED THEN 
    
    CALL SendRequestElevator WITH Floor AND Elevator 
    RETURN Elevator


' Second Options for better Elevator if Elevator = idle
  ELSE IF Floor = Elevator Floor AND Elevator status = IDLE THEN
    
    CALL SendRequestElevator WITH Floor AND Elevator 
    RETURN Elevator

    
'  Third Option for best elevator 
  ELSE IF Floor > Elevator Floor AND Elevator status = MOVING OR STOPPED AND Elevator direction = UP  THEN
    CALL SendRequestElevator WITH Floor AND Elevator 
    CALL FindNearestElevator WITH Floor AND Elevator CageFloor AND direction RETURNING NearestElevator
  RETURN NearestElevator 

  ' fourth option for best elevator
  ELSE IF Floor < Elevator Floor AND Elevator status = MOVING OR STOPPED AND Elevator direction = DOWN  THEN
      CALL SendRequestElevator WITH Floor AND Elevator 
      CALL FindNearestElevator WITH Floor AND Elevator CageFloor AND direction RETURNING NearestElevator
    RETURN NearestElevator

' fifth option for the best elevator
  ELSE IF Elevator status = IDLE THEN
    CALL SendRequestElevator WITH Floor AND Elevator 
    RETURN Elevator
    
    END IF

  END FOR

  ' call the Sequence and returning the LeastBusy elevator
   CALL FindLeastBusyElevator RETURNING LeastBusyElevator
   RETURN LeastBusyElevator

  END SEQUENCE
------------------------------------------------------------------------------------------------------------------------------------------------------

' Least busy Elevator for request
SEQUENCE FindLeastBusyElevator 

SET ListLength TO TotalFloor

  FOR EACH Elevator in Elevators 

    IF ListLength > Length of Elevator FloorList
     SET ListLength TO length of Elevator FloorList

    END IF
  DETERMINE LeastBusyElevator WITH ListLength
   RETURN LeastBusyElevator
  END FOR
END SEQUENCE

---------------------------------------------------------------------------------------------------------------------------------------------------
'
' function to reset button orders in ascending and descending order

' Make in order in the list of each elevator floors
SEQUENCE SortList USING direction AND FloorList
  SET FloorList to SortedFloorList

    IF direction = UP THEN 
      COMPUTE CallButtonFloor TO ASCENDING

    ELSE IF direction = DOWN THEN
    COMPUTE CallButtonFloor TO DESCENDING
  END IF

SET FloorList TO SortedFloorList
  RETURN SortedFloorList
END SEQUENCE
---------------------------------------------------------------------------------------------------------------------------------------------------
'RefGap = stages where you have to call the button and stages or is the user
' every timer you have your Gap you compare it to RefCap
' your reference Gap is the one you bring with you and it is the one who wins
' then for each follower calculate the Gap and the elevator Floor
' Refgap is Elevator is looking for a distance then it goes around and finds the nearest and sends the closest



SEQUENCE FindNearestElevator USING Floor AND Elevator CageFloor
  COMPUTE RefGap AS BETWEEN Floor AND Elevator CageFloor 
    SET ShortestGap = RefGap

  FOR EACH Elevator in Elevators 
    IF Elevator direction = direction THEN
      COMPUTE Gap AS DIFFERENCE BETWEEN Floor AND Elevator Floor

     IF Gap < ShortestGap
        SET ShortestGap = Gap

    END If    
    END IF
  END FOR

' have just used what is found in the loop and returns the NearestElevator
  DETERMINE NearestElevator WITH ShortestGap
    RETURN NearestElevator

END DETERMINE
END SEQUENCE
-------------------------------------------------------------------------------------------------------------------------------------------------
' create a list that determines the least occuped of the list and the length of it and it returns the least occuped the elevator
' List for every button Elevators

SEQUENCE ElevatorList
  FOR EACH elevator in Elevators
 END FOR
    DETERMINE Elevator LeastBusy WITH Elevator ListLength
    RETURN Elevator LeastBusy
END SEQUENCE
--------------------------------------------------------------------------------------------------------------------------------------

' Check all elevators and clear all request list
SEQUENCE OperateBattery
  WHILE battery status = Operational
    FOR EACH Elevator in Elevators
     WHILE Elevator FloorList =  NOT EMPTY
      READ NextFloor FROM FloorList

      '  next floor is equal to this one
        IF NextFloor = Elevator Floor THEN
          CALL OpenDoors THEN
          CALL CallButtonLightOff THEN
          CALL FloorButtonLightOff THEN
          REMOVE CallButtonFloor OR RequestedFloor to FloorList 


      '  the next floor is taller than this one move up
        ELSE IF NextFloor > Elevator Floor THEN
          CALL MovingStatus THEN
          CALL OperateUP 

         
      '   the next floor is smaller than this one move down
       ELSE IF NextFloor < Elevator Floor THEN
          CALL MovingStatus THEN
          CALL OperateDown 


        END IF          
    END WHILE
        CALL IDLEStatus
   END FOR    
  END WHILE
END SEQUENCE
---------------------------------------------------------------------------------------------------------------------------------------
' moving elevator process
SEQUENCE MovingStatus
  SET Elevator status TO MOVING
END SEQUENCE
-----------------------------------------------------------------------------------------------------------------------------------------
' Elevator Idle Status process
SEQUENCE IdleStatus
  SET Elevator status  TO IDLE
END SEQUENCE
--------------------------------------------------------------------------------------------------------------------------------------
' Elevator Stopped status process
SEQUENCE StoppedStatus
  SET Elevator status TO STOPPED
END SEQUENCE
-----------------------------------------------------------------------------------------------------------------------------------